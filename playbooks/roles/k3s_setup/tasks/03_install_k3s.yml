---

- name: "Count the number of master nodes"
  set_fact:
    master_count: "{{ groups['master'] | length | int }}"

- name: "Debug Master Count Type"
  debug:
    msg: "Master count is {{ master_count }} (Type: {{ master_count | type_debug }})"

- name: "Skip HA setup if there are less than 3 master nodes"
  debug:
    msg: "Not enough master nodes ({{ master_count }} < 3). Skipping HA K3s installation."
  when: (master_count | int) < 3

- name: "Install and Configure K3s in HA mode if there are at least 3 masters"
  block:

    - name: Install K3s on the first master node
      shell: |
        curl -sfL https://get.k3s.io | K3S_TOKEN=mysecret sh -s - server --cluster-init --tls-san {{ keepalived_vip }}
      when: inventory_hostname == groups['master'][0]
      register: k3s_install_first_master
      become: true

    - name: Ensure K3s is enabled and running on the first master node
      ansible.builtin.systemd:
        name: k3s
        enabled: yes
        state: started
      when: inventory_hostname == groups['master'][0]
      become: true

    - name: Wait for K3s server to become ready on the first master node
      ansible.builtin.wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        state: present
      when: inventory_hostname == groups['master'][0]
      become: true
      retries: 5
      delay: 10

    - name: Retrieve K3s token from the first master node
      shell: cat /var/lib/rancher/k3s/server/node-token
      when: inventory_hostname == groups['master'][0]
      register: k3s_token
      become: true
      run_once: true

    - name: Set K3s token fact
      set_fact:
        k3s_token: "{{ k3s_token.stdout }}"
      run_once: true

    - name: Install K3s on additional master nodes
      shell: |
        curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} sh -s - server --server https://{{ keepalived_vip }}:6443 --tls-san {{ keepalived_vip }}
      when: inventory_hostname != groups['master'][0] and 'master' in group_names and (master_count | int) >= 3
      register: join_additional_master
      become: true

    - name: Ensure K3s is enabled and running on additional master nodes
      ansible.builtin.systemd:
        name: k3s
        enabled: yes
        state: started
      when: inventory_hostname != groups['master'][0] and 'master' in group_names and (master_count | int) >= 3
      become: true

  when: (master_count | int) >= 3

- name: "Single Master Setup (No HA) if less than 3 masters"
  block:

    - name: Install K3s on the single master node
      shell: |
        curl -sfL https://get.k3s.io | sh -
      when: inventory_hostname == groups['master'][0]
      register: k3s_install_single_master
      become: true

    - name: Ensure K3s is enabled and running on the single master node
      ansible.builtin.systemd:
        name: k3s
        enabled: yes
        state: started
      when: inventory_hostname == groups['master'][0]
      become: true

    - name: Wait for K3s server to become ready on the single master node
      ansible.builtin.wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        state: present
      when: inventory_hostname == groups['master'][0]
      become: true
      retries: 5
      delay: 10

    - name: Retrieve K3s token from the single master node
      shell: cat /var/lib/rancher/k3s/server/node-token
      when: inventory_hostname == groups['master'][0]
      register: single_k3s_token
      become: true
      run_once: true

    - name: Set K3s token fact for single master
      set_fact:
        single_k3s_token: "{{ single_k3s_token.stdout }}"
      run_once: true

    - name: Debug Single Master K3s token
      debug:
        msg: "Single Master K3s token is {{ single_k3s_token }}"

    - name: Install K3s agent on worker nodes
      shell: |
        curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars[groups['master'][0]]['ansible_host'] }}:6443 K3S_TOKEN={{ single_k3s_token }} sh -
      when: "'worker' in group_names"
      register: join_worker
      become: true

    - name: Ensure K3s agent is enabled and running on worker nodes
      ansible.builtin.systemd:
        name: k3s-agent
        enabled: yes
        state: started
      when: "'worker' in group_names and (master_count | int) < 3"
      become: true

  when: (master_count | int) < 3


- name: Check K3s service status on master nodes
  shell: systemctl status k3s | grep -E 'Active:|Main PID:'
  register: k3s_service_status
  ignore_errors: true
  become: true
  when: "'master' in group_names"

- name: Debug K3s service status on master nodes
  debug:
    msg: "{{ k3s_service_status.stdout }}"
  when: "'master' in group_names"

- name: Check K3s agent service status on worker nodes
  shell: systemctl status k3s-agent | grep -E 'Active:|Main PID:'
  register: k3s_agent_service_status
  ignore_errors: true
  become: true
  when: "'worker' in group_names"

- name: Debug K3s agent service status on worker nodes
  debug:
    msg: "{{ k3s_agent_service_status.stdout }}"
  when: "'worker' in group_names"

- name: Define the user name with UID 1000
  command: getent passwd 1000
  register: getent_passwd_result
  changed_when: false

- name: Set user name variable from getent passwd output
  set_fact:
    uid_1000_user: "{{ getent_passwd_result.stdout.split(':')[0] }}"
  when: getent_passwd_result.stdout != ''

- name: Create .kube directory for user with UID 1000
  ansible.builtin.file:
    path: "/home/{{ uid_1000_user }}/.kube"
    state: directory
    mode: '0755'
    owner: "{{ uid_1000_user }}"
    group: "{{ uid_1000_user }}"
  when: "'master' in group_names and uid_1000_user is defined"

- name: Remove existing kube config if it exists
  ansible.builtin.file:
    path: "/home/{{ uid_1000_user }}/.kube/config"
    state: absent
  when: "'master' in group_names and uid_1000_user is defined"

- name: Create symbolic link to k3s.yaml for user's kube config
  ansible.builtin.file:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "/home/{{ uid_1000_user }}/.kube/config"
    state: link
    owner: "{{ uid_1000_user }}"
    group: "{{ uid_1000_user }}"
  when: "'master' in group_names and uid_1000_user is defined"

- name: Ensure .bashrc contains KUBECONFIG
  lineinfile:
    path: "/home/{{ uid_1000_user }}/.bashrc"
    line: 'export KUBECONFIG="/home/{{ uid_1000_user }}/.kube/config"'
    state: present
  when: "'master' in group_names and uid_1000_user is defined"

- name: Source .bashrc to apply changes
  shell: source /home/{{ uid_1000_user }}/.bashrc
  when: "'master' in group_names and uid_1000_user is defined"
  args:
    executable: /bin/bash
