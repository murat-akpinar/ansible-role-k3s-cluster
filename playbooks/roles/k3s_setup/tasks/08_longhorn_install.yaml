---
# ============================
# Install Longhorn
# ============================

- name: Check if longhorn-system namespace exists
  command: kubectl get namespace longhorn-system
  register: longhorn_namespace_exists
  failed_when: false
  changed_when: false
  when: "'master' in group_names"

- name: Check if Longhorn Helm repository is already added
  ansible.builtin.command:
    cmd: helm repo list
  register: helm_repo_list
  ignore_errors: true
  become: true
  become_user: "{{ uid_1000_user }}"
  when: "'master' in group_names"

- name: Fail if helm repo list failed for reasons other than no repositories
  ansible.builtin.fail:
    msg: "Failed to list Helm repositories: {{ helm_repo_list.stderr }}"
  when: 
    - "'master' in group_names"
    - helm_repo_list.rc != 0
    - "'Error: no repositories to show' not in helm_repo_list.stderr"

- name: Extract Helm repository names
  ansible.builtin.shell: |
    echo "{{ helm_repo_list.stdout }}" | awk 'NR > 1 {print $1}'
  register: helm_repo_names
  when: "'master' in group_names"

- name: Check if Longhorn Helm repository is already present
  ansible.builtin.set_fact:
    longhorn_repo_present: "{{ 'longhorn' in helm_repo_names.stdout }}"
  when: "'master' in group_names"

- name: Debug if Longhorn Helm repository is present
  ansible.builtin.debug:
    msg: "Longhorn Helm repository is present: {{ longhorn_repo_present }}"
  when: "'master' in group_names"

- name: Add Longhorn Helm repository
  ansible.builtin.command:
    cmd: helm repo add longhorn https://charts.longhorn.io
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - "'master' in group_names"
    - not longhorn_repo_present

- name: Debug message if Longhorn Helm repository is already present
  ansible.builtin.debug:
    msg: "Longhorn Helm repository is already added."
  when:
    - "'master' in group_names"
    - longhorn_repo_present

- name: Update Helm repository list
  ansible.builtin.command:
    cmd: helm repo update
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - "'master' in group_names"

- name: Download values.yaml for Longhorn
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/longhorn/longhorn/refs/heads/master/chart/values.yaml
    dest: "{{ user_home_directory }}/my-charts/longhorn/values.yaml"
    mode: '0644'
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - inventory_hostname == 'master-1'

- name: Install Longhorn Helm chart
  ansible.builtin.command:
    cmd: helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace -f {{ user_home_directory }}/my-charts/longhorn/values.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - longhorn_namespace_exists.rc != 0

- name: Wait for Longhorn pods to be in Running state
  command: kubectl get pods -n longhorn-system -l app=longhorn-manager -o jsonpath='{.items[*].status.phase}'
  register: longhorn_pod_status
  until: longhorn_pod_status.stdout.find('Running') != -1
  retries: 10
  delay: 60
  when: 
    - inventory_hostname == 'master-1'
    - longhorn_namespace_exists.rc != 0

- name: Apply Longhorn StorageClass
  ansible.builtin.command:
    cmd: kubectl apply -f {{ user_home_directory }}/my-charts/longhorn/storageclass.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - longhorn_namespace_exists.rc != 0

- name: Apply Longhorn ingress config
  ansible.builtin.command:
    cmd: kubectl apply -f {{ user_home_directory }}/my-charts/longhorn/cert/homelab.longhorn.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - longhorn_namespace_exists.rc != 0
    - cert_manager_install | default(false)

- name: Apply homelab.longhorn certificate
  ansible.builtin.command:
    cmd: kubectl apply -f {{ user_home_directory }}/my-charts/longhorn/cert/homelab-longhorn-certificate.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - longhorn_namespace_exists.rc != 0
    - cert_manager_install | default(false)