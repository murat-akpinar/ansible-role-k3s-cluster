---
# ============================
# Install Grafana
# ============================

- name: Check if grafana namespace exists
  command: kubectl get namespace grafana
  register: grafana_namespace_exists
  failed_when: false
  changed_when: false
  when: "'master' in group_names"

- name: Check if Prometheus and Grafana Helm repositories are already added
  ansible.builtin.command:
    cmd: helm repo list
  register: helm_repo_list
  ignore_errors: true
  become: true
  become_user: "{{ uid_1000_user }}"
  when: "'master' in group_names"

- name: Fail if helm repo list failed for reasons other than no repositories
  ansible.builtin.fail:
    msg: "Failed to list Helm repositories: {{ helm_repo_list.stderr }}"
  when: 
    - "'master' in group_names"
    - helm_repo_list.rc != 0
    - "'Error: no repositories to show' not in helm_repo_list.stderr"

- name: Extract Helm repository names
  ansible.builtin.shell: |
    echo "{{ helm_repo_list.stdout }}" | awk 'NR > 1 {print $1}'
  register: helm_repo_names
  when: "'master' in group_names"

- name: Check if Prometheus Helm repository is already present
  ansible.builtin.set_fact:
    prometheus_repo_present: "{{ 'prometheus-community' in helm_repo_names.stdout }}"
  when: "'master' in group_names"

- name: Check if Grafana Helm repository is already present
  ansible.builtin.set_fact:
    grafana_repo_present: "{{ 'grafana' in helm_repo_names.stdout }}"
  when: "'master' in group_names"

- name: Debug if Prometheus and Grafana Helm repositories are present
  ansible.builtin.debug:
    msg: "Prometheus Helm repository is present: {{ prometheus_repo_present }}. Grafana Helm repository is present: {{ grafana_repo_present }}"
  when: "'master' in group_names"

- name: Add Prometheus Helm repository
  ansible.builtin.command:
    cmd: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - "'master' in group_names"
    - not prometheus_repo_present

- name: Add Grafana Helm repository
  ansible.builtin.command:
    cmd: helm repo add grafana https://grafana.github.io/helm-charts
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - "'master' in group_names"
    - not grafana_repo_present

- name: Debug message if Prometheus and Grafana Helm repositories are already present
  ansible.builtin.debug:
    msg: "Prometheus and Grafana Helm repositories are already added."
  when:
    - "'master' in group_names"
    - prometheus_repo_present
    - grafana_repo_present

- name: Update Helm repository list
  ansible.builtin.command:
    cmd: helm repo update
  become: true
  become_user: "{{ uid_1000_user }}"
  when: 
    - "'master' in group_names"

- name: Install Prometheus Helm chart
  ansible.builtin.command:
    cmd: helm install prometheus prometheus-community/prometheus --namespace prometheus --create-namespace -f {{ user_home_directory }}/my-charts/grafana/prometheus-values.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - grafana_namespace_exists.rc != 0

- name: Install Grafana Helm chart
  ansible.builtin.command:
    cmd: helm install grafana grafana/grafana --namespace grafana --create-namespace -f {{ user_home_directory }}/my-charts/grafana/grafana-values.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - grafana_namespace_exists.rc != 0

- name: Wait for Grafana pods to be in Running state
  command: kubectl get pods -n grafana -l app.kubernetes.io/name=grafana -o jsonpath='{.items[*].status.phase}'
  register: grafana_pod_status
  until: grafana_pod_status.stdout.find('Running') != -1
  retries: 10
  delay: 60
  when: 
    - inventory_hostname == 'master-1'
    - grafana_namespace_exists.rc != 0

- name: Wait for Grafana PVC to be bound
  command: kubectl get pvc -n grafana -o jsonpath='{.items[*].status.phase}'
  register: grafana_pvc_status
  until: grafana_pvc_status.stdout.find('Bound') != -1
  retries: 10
  delay: 30
  when: inventory_hostname == 'master-1'

- name: Wait for Prometheus PVC to be bound
  command: kubectl get pvc -n prometheus -o jsonpath='{.items[*].status.phase}'
  register: prometheus_pvc_status
  until: prometheus_pvc_status.stdout.find('Bound') != -1
  retries: 10
  delay: 30
  when: inventory_hostname == 'master-1'

- name: Apply Grafana ingress config
  ansible.builtin.command:
    cmd: kubectl apply -f {{ user_home_directory }}/my-charts/grafana/cert/homelab.grafana.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - grafana_namespace_exists.rc != 0
    - cert_manager_install | default(false)

- name: Apply homelab.grafana certificate
  ansible.builtin.command:
    cmd: kubectl apply -f {{ user_home_directory }}/my-charts/grafana/cert/homelab-grafana-certificate.yaml
  become: true
  become_user: "{{ uid_1000_user }}"
  environment:
    KUBECONFIG: "{{ user_home_directory }}/.kube/config"
  when: 
    - inventory_hostname == 'master-1'
    - grafana_namespace_exists.rc != 0
    - cert_manager_install | default(false)

- name: Retrieve Grafana admin password
  ansible.builtin.shell: >
    kubectl get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode
  register: grafana_admin_password
  when: inventory_hostname == 'master-1'

- name: Display Grafana admin password
  debug:
    msg: "Grafana admin password: {{ grafana_admin_password.stdout }}"
  when: inventory_hostname == 'master-1'

- name: Retrieve Prometheus server IP address
  ansible.builtin.shell: >
    kubectl get svc -n prometheus prometheus-server -o jsonpath="{.spec.clusterIP}"
  register: prometheus_server_ip
  when: inventory_hostname == 'master-1'

- name: Display Prometheus server IP address
  debug:
    msg: "Prometheus server IP address: {{ prometheus_server_ip.stdout }}"
  when: inventory_hostname == 'master-1'

- name: Construct Prometheus data URL
  set_fact:
    prometheus_data_url: "http://prometheus-server.prometheus.svc.cluster.local"
  when: inventory_hostname == 'master-1'

- name: Display Prometheus data URL
  debug:
    msg: "Prometheus data URL: {{ prometheus_data_url }}"
  when: inventory_hostname == 'master-1'